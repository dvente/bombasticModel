MINION 3
# AC-CSE-Times_number = 0
# AC-CSE-Times_eliminated_expressions = 0
# AC-CSE-Times_total_size = 0
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# AC-CSE-Or_number = 0
# AC-CSE-Or_eliminated_expressions = 0
# AC-CSE-Or_total_size = 0
# AC-CSE-And_number = 0
# AC-CSE-And_eliminated_expressions = 0
# AC-CSE-And_total_size = 0
# AC-CSE-Sum_number = 18
# AC-CSE-Sum_eliminated_expressions = 41
# AC-CSE-Sum_total_size = 56
# CSE_active_number = 6
# CSE_active_eliminated_expressions = 14
# CSE_active_total_size = 65
**VARIABLES**
DISCRETE moveRow_00000 #
{0..1}
DISCRETE moveRow_00001 #
{-1..0}
DISCRETE moveRow_00002 #
{0..1}
DISCRETE moveCol_00000 #
{-1..0}
DISCRETE moveCol_00001 #
{0..1}
DISCRETE moveCol_00002 #
{-1..0}
DISCRETE avatarCurrentRow_00001 #
{2..3}
DISCRETE avatarCurrentRow_00003 #
{2..3}
DISCRETE avatarCurrentCol_00001 #
{3..4}
DISCRETE avatarCurrentCol_00003 #
{3..4}
DISCRETE blocksCurrentRow_00001_00001 #
{3..4}
DISCRETE aux82 #AC-CSE-Generic-+: 4 occurrences of: (5*avatarCurrentRow_00001 + avatarCurrentCol_00001-13)
{0..6}
DISCRETE aux89 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentRow_00001 + moveRow_00000)
{2..4}
DISCRETE aux90 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00001 + 2*moveCol_00000)
{1..4}
DISCRETE aux91 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentRow_00001 + 2*moveRow_00000)
{2..5}
DISCRETE aux92 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00001 + moveCol_00000)
{2..4}
DISCRETE aux93 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentRow_00003 + moveRow_00002)
{2..4}
DISCRETE aux94 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003 + moveCol_00002)
{2..4}
DISCRETE aux95 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentRow_00003 + 2*moveRow_00002)
{2..5}
DISCRETE aux96 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003 + 2*moveCol_00002)
{1..4}
DISCRETE aux97 #AC-CSE-Generic-+: 2 occurrences of: (5*avatarCurrentRow_00003 + avatarCurrentCol_00003-13)
{0..6}
DISCRETE aux99 #AC-CSE-Generic-+: 2 occurrences of: (-15 + 5*blocksCurrentRow_00001_00001)
{0..5}
DISCRETE aux100 #Active-CSE: 4 occurrences of this expression or equivalent: SafeElement([2, 2, 0, 0, 0, 0, 2;int(1..7)], aux82)
{0..2}
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2, 0, 0, 0, 0, 2;int(1..7)], aux97)
{0..2}
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 0, 0, 0, 0, 2;int(1..6)], aux98)
{0..2}
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 0, 0, 0, 0, 2;int(1..6)], aux99)
{0..2}
BOOL aux104 #Active-CSE: 2 occurrences of this expression or equivalent: (avatarCurrentRow_00003 != blocksCurrentRow_00001_00001)
DISCRETE aux109 #(moveRow_00002 + blocksCurrentRow_00001_00001)
{3..5}
DISCRETE aux110 #(moveRow_00000 + 3)
{3..4}
**TUPLELIST**
gridInit 5 5
0 0 0 0 0 
0 2 2 2 0 
0 0 0 2 0 
0 0 0 2 0 
0 0 0 0 0 
**VARIABLES**
ALIAS gridInit[5,5]=[[0, 0, 0, 0, 0], [0, 2, 2, 2, 0], [0, 0, 0, 2, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0]]
ALIAS blocksInitRow[2]=[2, 3]
ALIAS blocksInitCol[2]=[2, 4]
ALIAS blocksGoalRow[2]=[2, 4]
ALIAS blocksGoalCol[2]=[2, 4]
**SEARCH**
PRINT[[moveRow_00000],[moveRow_00001],[moveRow_00002],[moveCol_00000],[moveCol_00001],[moveCol_00002],[avatarCurrentRow_00001],[avatarCurrentRow_00003],[avatarCurrentCol_00001],[avatarCurrentCol_00003],[blocksCurrentRow_00001_00001]]
VARORDER STATIC [moveRow_00000, moveRow_00001, moveRow_00002, moveCol_00000, moveCol_00001, moveCol_00002, 2, avatarCurrentRow_00001, 2, avatarCurrentRow_00003, 4, avatarCurrentCol_00001, 4, avatarCurrentCol_00003, 2, 3, 2, blocksCurrentRow_00001_00001, 2, blocksCurrentRow_00001_00001, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]
VARORDER AUX [moveRow_00000,moveRow_00001,moveRow_00002,moveCol_00000,moveCol_00001,moveCol_00002,avatarCurrentRow_00001,avatarCurrentRow_00003,avatarCurrentCol_00001,avatarCurrentCol_00003,blocksCurrentRow_00001_00001,aux82,aux89,aux90,aux91,aux92,aux93,aux94,aux95,aux96,aux97,aux99,aux100,aux101,aux102,aux103,aux104,aux109,aux110]
**CONSTRAINTS**
watchelement_undefzero([2, 2, 0, 0, 0, 0, 2], aux82, aux100)
watchelement_undefzero([2, 2, 0, 0, 0, 0, 2], aux97, aux101)
watchelement_undefzero([2, 0, 0, 0, 0, 2], aux99, aux102)
watchelement_undefzero([2, 0, 0, 0, 0, 2], aux99, aux103)
reify(diseq(avatarCurrentRow_00003,blocksCurrentRow_00001_00001), aux104)
diseq(0,aux100)
diseq(0,aux101)
watched-or({diseq(avatarCurrentCol_00001,4),diseq(avatarCurrentRow_00001,blocksCurrentRow_00001_00001)})
watched-or({diseq(4,avatarCurrentCol_00003),w-literal(aux104,1),watched-and({w-literal(moveCol_00002,0),w-literal(aux109,4)})})
watched-or({diseq(1,aux100),w-literal(aux100,0)})
watched-or({watched-and({w-literal(moveRow_00000,1),w-literal(moveCol_00000,0)}),w-literal(blocksCurrentRow_00001_00001,3)})
watched-or({watched-and({watched-or({diseq(aux91,blocksCurrentRow_00001_00001),diseq(4,aux90)}),watched-or({diseq(2,aux90),diseq(2,aux91)})}),diseq(aux89,blocksCurrentRow_00001_00001),diseq(2,aux89),diseq(2,aux92),diseq(4,aux92)})
ineq(1, aux102, 0)
ineq(1, aux103, 0)
diseq(0,aux102)
diseq(0,aux103)
watched-or({watched-and({watched-or({diseq(2,aux95),diseq(2,aux96)}),watched-or({diseq(4,aux95),diseq(4,aux96)})}),diseq(2,aux93),diseq(2,aux94),diseq(4,aux93),diseq(4,aux94)})
watched-or({w-literal(blocksCurrentRow_00001_00001,4),watched-and({w-literal(moveCol_00002,0),w-literal(aux104,0)})})
watched-or({watched-and({gaceq(aux110,blocksCurrentRow_00001_00001),w-literal(moveCol_00000,0)}),diseq(3,avatarCurrentRow_00001),diseq(4,avatarCurrentCol_00001)})
ineq(1, aux100, 0)
ineq(1, aux101, 0)
weightedsumleq([-1,1],[moveRow_00001,moveCol_00001],1)
weightedsumgeq([-1,1],[moveRow_00001,moveCol_00001],1)
weightedsumleq([1,-1],[moveRow_00000,moveCol_00000],1)
weightedsumgeq([1,-1],[moveRow_00000,moveCol_00000],1)
weightedsumleq([1,-1],[moveRow_00002,moveCol_00002],1)
weightedsumgeq([1,-1],[moveRow_00002,moveCol_00002],1)
sumleq([moveRow_00002,blocksCurrentRow_00001_00001],aux109)
sumgeq([moveRow_00002,blocksCurrentRow_00001_00001],aux109)
sumleq([moveRow_00000,3],aux110)
sumgeq([moveRow_00000,3],aux110)
weightedsumleq([1,5],[-15,blocksCurrentRow_00001_00001],aux99)
weightedsumgeq([1,5],[-15,blocksCurrentRow_00001_00001],aux99)
weightedsumleq([5,1,1],[avatarCurrentRow_00001,avatarCurrentCol_00001,-13],aux82)
weightedsumgeq([5,1,1],[avatarCurrentRow_00001,avatarCurrentCol_00001,-13],aux82)
sumleq([moveRow_00002,2],avatarCurrentRow_00003)
sumgeq([moveRow_00002,2],avatarCurrentRow_00003)
sumleq([avatarCurrentCol_00001,moveCol_00001],4)
sumgeq([avatarCurrentCol_00001,moveCol_00001],4)
sumleq([avatarCurrentRow_00001,moveRow_00001],2)
sumgeq([avatarCurrentRow_00001,moveRow_00001],2)
sumleq([moveCol_00002,4],avatarCurrentCol_00003)
sumgeq([moveCol_00002,4],avatarCurrentCol_00003)
sumleq([moveCol_00000,4],avatarCurrentCol_00001)
sumgeq([moveCol_00000,4],avatarCurrentCol_00001)
sumleq([moveRow_00000,2],avatarCurrentRow_00001)
sumgeq([moveRow_00000,2],avatarCurrentRow_00001)
sumleq([avatarCurrentRow_00001,moveRow_00000],aux89)
sumgeq([avatarCurrentRow_00001,moveRow_00000],aux89)
weightedsumleq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux90)
weightedsumgeq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux90)
weightedsumleq([1,2],[avatarCurrentRow_00001,moveRow_00000],aux91)
weightedsumgeq([1,2],[avatarCurrentRow_00001,moveRow_00000],aux91)
sumleq([avatarCurrentCol_00001,moveCol_00000],aux92)
sumgeq([avatarCurrentCol_00001,moveCol_00000],aux92)
sumleq([avatarCurrentRow_00003,moveRow_00002],aux93)
sumgeq([avatarCurrentRow_00003,moveRow_00002],aux93)
sumleq([avatarCurrentCol_00003,moveCol_00002],aux94)
sumgeq([avatarCurrentCol_00003,moveCol_00002],aux94)
weightedsumleq([1,2],[avatarCurrentRow_00003,moveRow_00002],aux95)
weightedsumgeq([1,2],[avatarCurrentRow_00003,moveRow_00002],aux95)
weightedsumleq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux96)
weightedsumgeq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux96)
weightedsumleq([5,1,1],[avatarCurrentRow_00003,avatarCurrentCol_00003,-13],aux97)
weightedsumgeq([5,1,1],[avatarCurrentRow_00003,avatarCurrentCol_00003,-13],aux97)
**EOF**
