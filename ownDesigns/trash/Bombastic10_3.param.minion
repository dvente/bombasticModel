MINION 3
# AC-CSE-Times_number = 0
# AC-CSE-Times_eliminated_expressions = 0
# AC-CSE-Times_total_size = 0
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# AC-CSE-Or_number = 0
# AC-CSE-Or_eliminated_expressions = 0
# AC-CSE-Or_total_size = 0
# AC-CSE-And_number = 0
# AC-CSE-And_eliminated_expressions = 0
# AC-CSE-And_total_size = 0
# AC-CSE-Sum_number = 15
# AC-CSE-Sum_eliminated_expressions = 39
# AC-CSE-Sum_total_size = 45
# CSE_active_number = 8
# CSE_active_eliminated_expressions = 18
# CSE_active_total_size = 62
**VARIABLES**
DISCRETE moveCol_00000 #
{-1..1}
DISCRETE moveCol_00001 #
{-1..1}
DISCRETE moveCol_00002 #
{-1..1}
DISCRETE avatarCurrentCol_00001 #
{3..5}
DISCRETE avatarCurrentCol_00003 #
{3..5}
DISCRETE blocksCurrentCol_00001_00000 #
{2..3}
DISCRETE blocksCurrentCol_00001_00001 #
{5..6}
DISCRETE aux84 #AC-CSE-Generic-+: 4 occurrences of: (avatarCurrentCol_00001-3)
{0..2}
DISCRETE aux86 #AC-CSE-Generic-+: 2 occurrences of: (moveCol_00001 + 4)
{3..5}
DISCRETE aux87 #AC-CSE-Generic-+: 2 occurrences of: (2*moveCol_00001 + 4)
{2..6}
DISCRETE aux88 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00001 + 2*moveCol_00000)
{1..7}
DISCRETE aux89 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00001 + moveCol_00000)
{2..6}
DISCRETE aux90 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003 + moveCol_00002)
{2..6}
DISCRETE aux91 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003 + 2*moveCol_00002)
{1..7}
DISCRETE aux92 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003-3)
{0..2}
BOOL aux95 #AC-CSE-Generic-+: 2 occurrences of: (blocksCurrentCol_00002_00001-5)
BOOL aux96 #AC-CSE-Generic-+: 2 occurrences of: (blocksCurrentCol_00001_00000-2)
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2, 2;int(1..3)], aux92)
{0..2}
DISCRETE aux98 #Active-CSE: 4 occurrences of this expression or equivalent: SafeElement([2, 2, 2;int(1..3)], aux84)
{0..2}
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux96)
{0..2}
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux93)
{0..2}
DISCRETE aux101 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux94)
{0..2}
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux95)
{0..2}
DISCRETE aux105 #(moveCol_00002 + blocksCurrentCol_00001_00001)
{4..7}
DISCRETE aux106 #(moveCol_00002 + blocksCurrentCol_00001_00000)
{1..4}
DISCRETE aux108 #(moveCol_00000 + 5)
{4..6}
DISCRETE aux109 #(moveCol_00000 + 3)
{2..4}
**TUPLELIST**
gridInit 3 8
0 0 0 0 0 0 0 0 
0 2 2 2 2 2 2 0 
0 0 0 0 0 0 0 0 
**VARIABLES**
ALIAS gridInit[3,8]=[[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
ALIAS blocksInitRow[2]=[2, 2]
ALIAS blocksInitCol[2]=[3, 5]
ALIAS blocksGoalRow[2]=[2, 2]
ALIAS blocksGoalCol[2]=[2, 6]
**SEARCH**
PRINT[[moveCol_00000],[moveCol_00001],[moveCol_00002],[avatarCurrentCol_00001],[avatarCurrentCol_00003],[blocksCurrentCol_00001_00000],[blocksCurrentCol_00001_00001]]
VARORDER STATIC [0, 0, 0, moveCol_00000, moveCol_00001, moveCol_00002, 2, 2, 2, 2, 4, avatarCurrentCol_00001, 4, avatarCurrentCol_00003, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, blocksCurrentCol_00001_00000, blocksCurrentCol_00001_00001, blocksCurrentCol_00001_00000, blocksCurrentCol_00001_00001, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
VARORDER AUX [moveCol_00000,moveCol_00001,moveCol_00002,avatarCurrentCol_00001,avatarCurrentCol_00003,blocksCurrentCol_00001_00000,blocksCurrentCol_00001_00001,aux84,aux86,aux87,aux88,aux89,aux90,aux91,aux92,aux95,aux96,aux97,aux98,aux99,aux100,aux101,aux102,aux105,aux106,aux108,aux109]
**CONSTRAINTS**
abs(1, moveCol_00001)
abs(1, moveCol_00000)
abs(1, moveCol_00002)
watchelement_undefzero([2, 2, 2], aux92, aux97)
watchelement_undefzero([2, 2, 2], aux84, aux98)
watchelement_undefzero([2, 2], aux96, aux99)
watchelement_undefzero([2, 2], aux96, aux100)
watchelement_undefzero([2, 2], aux95, aux101)
watchelement_undefzero([2, 2], aux95, aux102)
watched-or({w-literal(blocksCurrentCol_00001_00000,2),gaceq(blocksCurrentCol_00001_00000,avatarCurrentCol_00003)})
diseq(avatarCurrentCol_00001,blocksCurrentCol_00001_00000)
diseq(avatarCurrentCol_00001,blocksCurrentCol_00001_00001)
ineq(1, aux97, 0)
watched-or({w-literal(aux105,6),diseq(blocksCurrentCol_00001_00001,avatarCurrentCol_00003)})
watched-or({w-literal(blocksCurrentCol_00001_00000,3),w-literal(moveCol_00000,-1)})
watched-or({w-literal(blocksCurrentCol_00001_00001,5),w-literal(moveCol_00000,1)})
watched-or({diseq(blocksCurrentCol_00001_00000,aux86),diseq(blocksCurrentCol_00001_00001,aux86),watched-and({diseq(blocksCurrentCol_00001_00000,aux87),diseq(blocksCurrentCol_00001_00001,aux87)})})
watched-or({w-literal(aux106,2),diseq(blocksCurrentCol_00001_00000,avatarCurrentCol_00003)})
diseq(aux99,0)
watched-or({watched-and({diseq(blocksCurrentCol_00001_00000,aux88),diseq(blocksCurrentCol_00001_00001,aux88)}),diseq(blocksCurrentCol_00001_00000,aux89),diseq(blocksCurrentCol_00001_00001,aux89)})
diseq(aux101,0)
watched-or({gaceq(blocksCurrentCol_00001_00001,aux108),diseq(5,avatarCurrentCol_00001)})
watched-or({gaceq(blocksCurrentCol_00001_00000,aux109),diseq(3,avatarCurrentCol_00001)})
watched-or({w-literal(blocksCurrentCol_00001_00001,6),gaceq(blocksCurrentCol_00001_00001,avatarCurrentCol_00003)})
diseq(blocksCurrentCol_00001_00000,blocksCurrentCol_00001_00001)
watched-or({diseq(2,aux90),diseq(6,aux90),watched-and({diseq(2,aux91),diseq(6,aux91)})})
diseq(aux98,0)
diseq(aux97,0)
ineq(1, aux98, 0)
diseq(aux102,0)
diseq(aux100,0)
ineq(1, aux99, 0)
watched-or({w-literal(aux98,0),diseq(aux98,1)})
ineq(1, aux102, 0)
ineq(1, aux101, 0)
ineq(1, aux100, 0)
sumleq([moveCol_00002,blocksCurrentCol_00001_00001],aux105)
sumgeq([moveCol_00002,blocksCurrentCol_00001_00001],aux105)
sumleq([moveCol_00002,blocksCurrentCol_00001_00000],aux106)
sumgeq([moveCol_00002,blocksCurrentCol_00001_00000],aux106)
sumleq([moveCol_00000,5],aux108)
sumgeq([moveCol_00000,5],aux108)
sumleq([moveCol_00000,3],aux109)
sumgeq([moveCol_00000,3],aux109)
sumleq([blocksCurrentCol_00001_00000,-2],aux96)
sumgeq([blocksCurrentCol_00001_00000,-2],aux96)
sumleq([blocksCurrentCol_00001_00001,-5],aux95)
sumgeq([blocksCurrentCol_00001_00001,-5],aux95)
sumleq([moveCol_00002,4],avatarCurrentCol_00003)
sumgeq([moveCol_00002,4],avatarCurrentCol_00003)
sumleq([avatarCurrentCol_00001,moveCol_00001],4)
sumgeq([avatarCurrentCol_00001,moveCol_00001],4)
sumleq([avatarCurrentCol_00001,-3],aux84)
sumgeq([avatarCurrentCol_00001,-3],aux84)
sumleq([moveCol_00000,4],avatarCurrentCol_00001)
sumgeq([moveCol_00000,4],avatarCurrentCol_00001)
sumleq([moveCol_00001,4],aux86)
sumgeq([moveCol_00001,4],aux86)
weightedsumleq([2,1],[moveCol_00001,4],aux87)
weightedsumgeq([2,1],[moveCol_00001,4],aux87)
weightedsumleq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux88)
weightedsumgeq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux88)
sumleq([avatarCurrentCol_00001,moveCol_00000],aux89)
sumgeq([avatarCurrentCol_00001,moveCol_00000],aux89)
sumleq([avatarCurrentCol_00003,moveCol_00002],aux90)
sumgeq([avatarCurrentCol_00003,moveCol_00002],aux90)
weightedsumleq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux91)
weightedsumgeq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux91)
sumleq([avatarCurrentCol_00003,-3],aux92)
sumgeq([avatarCurrentCol_00003,-3],aux92)
**EOF**
