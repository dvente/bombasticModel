MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 17
# CSE_active_eliminated_expressions = 38
# CSE_active_total_size = 142
**VARIABLES**
DISCRETE moveCol_00000 #
{-1..1}
DISCRETE moveCol_00001 #
{-1..1}
DISCRETE moveCol_00002 #
{-1..1}
DISCRETE avatarCurrentCol_00001 #
{3..5}
DISCRETE avatarCurrentCol_00003 #
{3..5}
DISCRETE blocksCurrentCol_00001_00000 #
{2..3}
DISCRETE blocksCurrentCol_00001_00001 #
{5..6}
BOOL aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (((avatarCurrentCol_00003 + 2*moveCol_00002) != 2) /\ ((avatarCurrentCol_00003 + 2*moveCol_00002) != 6))
BOOL aux83 #Active-CSE: 2 occurrences of this expression or equivalent: (((avatarCurrentCol_00001 + 2*moveCol_00000) != blocksCurrentCol_00001_00000) /\ ((avatarCurrentCol_00001 + 2*moveCol_00000) != blocksCurrentCol_00001_00001))
BOOL aux84 #Active-CSE: 2 occurrences of this expression or equivalent: (((2*moveCol_00001 + 4) != blocksCurrentCol_00002_00000) /\ ((2*moveCol_00001 + 4) != blocksCurrentCol_00002_00001))
DISCRETE aux85 #Active-CSE: 3 occurrences of this expression or equivalent: SafeElement([2, 2, 2;int(1..3)], (avatarCurrentCol_00001-3))
{0..2}
BOOL aux88 #Active-CSE: 2 occurrences of this expression or equivalent: ((moveCol_00002 + 4) != blocksCurrentCol_00002_00000)
BOOL aux89 #Active-CSE: 2 occurrences of this expression or equivalent: ((moveCol_00002 + 4) != blocksCurrentCol_00002_00001)
DISCRETE aux91 #Active-CSE: 2 occurrences of this expression or equivalent: (2*moveCol_00001 + 4)
{2..6}
DISCRETE aux92 #Active-CSE: 2 occurrences of this expression or equivalent: (moveCol_00001 + 4)
{3..5}
DISCRETE aux93 #Active-CSE: 2 occurrences of this expression or equivalent: (avatarCurrentCol_00003 + moveCol_00002)
{2..6}
DISCRETE aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (avatarCurrentCol_00001 + moveCol_00000)
{2..6}
DISCRETE aux97 #Active-CSE: 2 occurrences of this expression or equivalent: (avatarCurrentCol_00001 + 2*moveCol_00000)
{1..7}
DISCRETE aux98 #Active-CSE: 2 occurrences of this expression or equivalent: (avatarCurrentCol_00003 + 2*moveCol_00002)
{1..7}
DISCRETE aux99 #(moveCol_00000 + 3)
{2..4}
DISCRETE aux100 #(moveCol_00002 + blocksCurrentCol_00001_00000)
{1..4}
DISCRETE aux101 #(moveCol_00002 + blocksCurrentCol_00001_00001)
{4..7}
DISCRETE aux102 #(avatarCurrentCol_00001-3)
{0..2}
BOOL aux103 #(blocksCurrentCol_00001_00000-2)
DISCRETE aux104 #SafeElement([2, 2;int(1..2)], aux103)
{0..2}
BOOL aux105 #(blocksCurrentCol_00001_00001-5)
DISCRETE aux106 #SafeElement([2, 2;int(1..2)], aux105)
{0..2}
DISCRETE aux108 #(moveCol_00000 + 5)
{4..6}
DISCRETE aux109 #(avatarCurrentCol_00003-3)
{0..2}
DISCRETE aux110 #SafeElement([2, 2, 2;int(1..3)], aux109)
{0..2}
BOOL aux111 #(blocksCurrentCol_00001_00001-5)
DISCRETE aux112 #SafeElement([2, 2;int(1..2)], aux111)
{0..2}
BOOL aux115 #(blocksCurrentCol_00001_00000-2)
DISCRETE aux116 #SafeElement([2, 2;int(1..2)], aux115)
{0..2}
**TUPLELIST**
gridInit 3 8
0 0 0 0 0 0 0 0 
0 2 2 2 2 2 2 0 
0 0 0 0 0 0 0 0 
**VARIABLES**
ALIAS gridInit[3,8]=[[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
ALIAS blocksInitRow[2]=[2, 2]
ALIAS blocksInitCol[2]=[3, 5]
ALIAS blocksGoalRow[2]=[2, 2]
ALIAS blocksGoalCol[2]=[2, 6]
**SEARCH**
PRINT[[moveCol_00000],[moveCol_00001],[moveCol_00002],[avatarCurrentCol_00001],[avatarCurrentCol_00003],[blocksCurrentCol_00001_00000],[blocksCurrentCol_00001_00001]]
VARORDER STATIC [0, 0, 0, moveCol_00000, moveCol_00001, moveCol_00002, 2, 2, 2, 2, 4, avatarCurrentCol_00001, 4, avatarCurrentCol_00003, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, blocksCurrentCol_00001_00000, blocksCurrentCol_00001_00001, blocksCurrentCol_00001_00000, blocksCurrentCol_00001_00001, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
VARORDER AUX [moveCol_00000,moveCol_00001,moveCol_00002,avatarCurrentCol_00001,avatarCurrentCol_00003,blocksCurrentCol_00001_00000,blocksCurrentCol_00001_00001,aux82,aux83,aux84,aux85,aux88,aux89,aux91,aux92,aux93,aux94,aux97,aux98,aux99,aux100,aux101,aux102,aux103,aux104,aux105,aux106,aux108,aux109,aux110,aux111,aux112,aux115,aux116]
**CONSTRAINTS**
watchelement_undefzero([2, 2], aux103, aux104)
watchelement_undefzero([2, 2], aux105, aux106)
abs(1, moveCol_00001)
watchelement_undefzero([2, 2, 2], aux109, aux110)
watchelement_undefzero([2, 2], aux111, aux112)
abs(1, moveCol_00000)
abs(1, moveCol_00002)
watchelement_undefzero([2, 2], aux115, aux116)
watched-or({diseq(aux92,blocksCurrentCol_00001_00001),w-literal(aux84,1)})
watched-or({w-literal(aux89,0),w-literal(blocksCurrentCol_00001_00001,6)})
watched-or({w-literal(aux88,0),w-literal(blocksCurrentCol_00001_00000,2)})
diseq(avatarCurrentCol_00001,blocksCurrentCol_00001_00000)
diseq(avatarCurrentCol_00001,blocksCurrentCol_00001_00001)
watched-or({diseq(avatarCurrentCol_00001,3),gaceq(blocksCurrentCol_00001_00000,aux99)})
reify(diseq(avatarCurrentCol_00003,blocksCurrentCol_00001_00000), aux88)
watched-or({w-literal(aux88,1),w-literal(aux100,2)})
reify(watched-and({diseq(aux97,blocksCurrentCol_00001_00000),diseq(aux97,blocksCurrentCol_00001_00001)}), aux83)
watched-or({w-literal(blocksCurrentCol_00001_00001,5),w-literal(moveCol_00000,1)})
watched-or({w-literal(blocksCurrentCol_00001_00000,3),w-literal(moveCol_00000,-1)})
watched-or({w-literal(aux89,1),w-literal(aux101,6)})
diseq(aux85,0)
watched-or({w-literal(aux83,1),diseq(aux94,blocksCurrentCol_00001_00000)})
watchelement_undefzero([2, 2, 2], aux102, aux85)
watched-or({w-literal(aux83,1),diseq(aux94,blocksCurrentCol_00001_00001)})
diseq(0,aux104)
watched-or({diseq(aux93,6),w-literal(aux82,1)})
diseq(aux106,0)
watched-or({diseq(aux93,2),w-literal(aux82,1)})
watched-or({w-literal(aux85,0),diseq(aux85,1)})
watched-or({diseq(aux92,blocksCurrentCol_00001_00000),w-literal(aux84,1)})
diseq(blocksCurrentCol_00001_00000,blocksCurrentCol_00001_00001)
watched-or({diseq(avatarCurrentCol_00001,5),gaceq(blocksCurrentCol_00001_00001,aux108)})
reify(diseq(avatarCurrentCol_00003,blocksCurrentCol_00001_00001), aux89)
reify(watched-and({diseq(aux91,blocksCurrentCol_00001_00000),diseq(aux91,blocksCurrentCol_00001_00001)}), aux84)
reify(watched-and({diseq(aux98,2),diseq(aux98,6)}), aux82)
diseq(aux110,0)
diseq(0,aux112)
diseq(aux116,0)
sumleq([moveCol_00000,3],aux99)
sumgeq([moveCol_00000,3],aux99)
sumleq([moveCol_00002,blocksCurrentCol_00001_00000],aux100)
sumgeq([moveCol_00002,blocksCurrentCol_00001_00000],aux100)
sumleq([moveCol_00002,blocksCurrentCol_00001_00001],aux101)
sumgeq([moveCol_00002,blocksCurrentCol_00001_00001],aux101)
sumleq([avatarCurrentCol_00001,-3],aux102)
sumgeq([avatarCurrentCol_00001,-3],aux102)
sumleq([blocksCurrentCol_00001_00000,-2],aux103)
sumgeq([blocksCurrentCol_00001_00000,-2],aux103)
sumleq([blocksCurrentCol_00001_00001,-5],aux105)
sumgeq([blocksCurrentCol_00001_00001,-5],aux105)
sumleq([moveCol_00000,5],aux108)
sumgeq([moveCol_00000,5],aux108)
sumleq([avatarCurrentCol_00003,-3],aux109)
sumgeq([avatarCurrentCol_00003,-3],aux109)
sumleq([blocksCurrentCol_00001_00001,-5],aux111)
sumgeq([blocksCurrentCol_00001_00001,-5],aux111)
sumleq([blocksCurrentCol_00001_00000,-2],aux115)
sumgeq([blocksCurrentCol_00001_00000,-2],aux115)
weightedsumleq([2,1],[moveCol_00001,4],aux91)
weightedsumgeq([2,1],[moveCol_00001,4],aux91)
sumleq([moveCol_00000,4],avatarCurrentCol_00001)
sumgeq([moveCol_00000,4],avatarCurrentCol_00001)
sumleq([avatarCurrentCol_00003,moveCol_00002],aux93)
sumgeq([avatarCurrentCol_00003,moveCol_00002],aux93)
sumleq([avatarCurrentCol_00001,moveCol_00000],aux94)
sumgeq([avatarCurrentCol_00001,moveCol_00000],aux94)
sumleq([moveCol_00001,4],aux92)
sumgeq([moveCol_00001,4],aux92)
sumleq([moveCol_00002,4],avatarCurrentCol_00003)
sumgeq([moveCol_00002,4],avatarCurrentCol_00003)
sumleq([avatarCurrentCol_00001,moveCol_00001],4)
sumgeq([avatarCurrentCol_00001,moveCol_00001],4)
weightedsumleq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux97)
weightedsumgeq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux97)
weightedsumleq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux98)
weightedsumgeq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux98)
**EOF**
