MINION 3
# AC-CSE-Times_number = 0
# AC-CSE-Times_eliminated_expressions = 0
# AC-CSE-Times_total_size = 0
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# AC-CSE-Or_number = 0
# AC-CSE-Or_eliminated_expressions = 0
# AC-CSE-Or_total_size = 0
# AC-CSE-And_number = 3
# AC-CSE-And_eliminated_expressions = 6
# AC-CSE-And_total_size = 63
# AC-CSE-Sum_number = 15
# AC-CSE-Sum_eliminated_expressions = 39
# AC-CSE-Sum_total_size = 45
# CSE_active_number = 8
# CSE_active_eliminated_expressions = 18
# CSE_active_total_size = 62
**VARIABLES**
DISCRETE moveCol_00000 #
{-1..1}
DISCRETE moveCol_00001 #
{-1..1}
DISCRETE moveCol_00002 #
{-1..1}
DISCRETE avatarCurrentCol_00001 #
{3..5}
DISCRETE avatarCurrentCol_00003 #
{3..5}
DISCRETE blocksCurrentCol_00001_00000 #
{2..3}
DISCRETE blocksCurrentCol_00001_00001 #
{5..6}
BOOL aux82 #AC-CSE-Generic-/\: 2 occurrences of: (((avatarCurrentCol_00001 + 2*moveCol_00000) != blocksCurrentCol_00001_00000) /\ ((avatarCurrentCol_00001 + 2*moveCol_00000) != blocksCurrentCol_00001_00001))
BOOL aux83 #AC-CSE-Generic-/\: 2 occurrences of: (((2*moveCol_00001 + 4) != blocksCurrentCol_00002_00000) /\ ((2*moveCol_00001 + 4) != blocksCurrentCol_00002_00001))
BOOL aux84 #AC-CSE-Generic-/\: 2 occurrences of: (((avatarCurrentCol_00003 + 2*moveCol_00002) != 2) /\ ((avatarCurrentCol_00003 + 2*moveCol_00002) != 6))
DISCRETE aux87 #AC-CSE-Generic-+: 4 occurrences of: (avatarCurrentCol_00001-3)
{0..2}
DISCRETE aux89 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00001 + 2*moveCol_00000)
{1..7}
DISCRETE aux90 #AC-CSE-Generic-+: 2 occurrences of: (2*moveCol_00001 + 4)
{2..6}
DISCRETE aux91 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003 + 2*moveCol_00002)
{1..7}
DISCRETE aux92 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00001 + moveCol_00000)
{2..6}
DISCRETE aux93 #AC-CSE-Generic-+: 2 occurrences of: (moveCol_00001 + 4)
{3..5}
DISCRETE aux94 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003 + moveCol_00002)
{2..6}
DISCRETE aux95 #AC-CSE-Generic-+: 2 occurrences of: (avatarCurrentCol_00003-3)
{0..2}
BOOL aux98 #AC-CSE-Generic-+: 2 occurrences of: (blocksCurrentCol_00002_00001-5)
BOOL aux99 #AC-CSE-Generic-+: 2 occurrences of: (blocksCurrentCol_00001_00000-2)
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2, 2;int(1..3)], aux95)
{0..2}
DISCRETE aux101 #Active-CSE: 4 occurrences of this expression or equivalent: SafeElement([2, 2, 2;int(1..3)], aux87)
{0..2}
DISCRETE aux102 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux96)
{0..2}
DISCRETE aux103 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux97)
{0..2}
DISCRETE aux104 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux98)
{0..2}
DISCRETE aux105 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([2, 2;int(1..2)], aux99)
{0..2}
DISCRETE aux108 #(moveCol_00002 + blocksCurrentCol_00001_00000)
{1..4}
DISCRETE aux110 #(moveCol_00000 + 5)
{4..6}
DISCRETE aux111 #(moveCol_00000 + 3)
{2..4}
DISCRETE aux112 #(moveCol_00002 + blocksCurrentCol_00001_00001)
{4..7}
**TUPLELIST**
gridInit 3 8
0 0 0 0 0 0 0 0 
0 2 2 2 2 2 2 0 
0 0 0 0 0 0 0 0 
**VARIABLES**
ALIAS gridInit[3,8]=[[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
ALIAS blocksInitRow[2]=[2, 2]
ALIAS blocksInitCol[2]=[3, 5]
ALIAS blocksGoalRow[2]=[2, 2]
ALIAS blocksGoalCol[2]=[2, 6]
**SEARCH**
PRINT[[moveCol_00000],[moveCol_00001],[moveCol_00002],[avatarCurrentCol_00001],[avatarCurrentCol_00003],[blocksCurrentCol_00001_00000],[blocksCurrentCol_00001_00001]]
VARORDER STATIC [0, 0, 0, moveCol_00000, moveCol_00001, moveCol_00002, 2, 2, 2, 2, 4, avatarCurrentCol_00001, 4, avatarCurrentCol_00003, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, blocksCurrentCol_00001_00000, blocksCurrentCol_00001_00001, blocksCurrentCol_00001_00000, blocksCurrentCol_00001_00001, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
VARORDER AUX [moveCol_00000,moveCol_00001,moveCol_00002,avatarCurrentCol_00001,avatarCurrentCol_00003,blocksCurrentCol_00001_00000,blocksCurrentCol_00001_00001,aux82,aux83,aux84,aux87,aux89,aux90,aux91,aux92,aux93,aux94,aux95,aux98,aux99,aux100,aux101,aux102,aux103,aux104,aux105,aux108,aux110,aux111,aux112]
**CONSTRAINTS**
abs(1, moveCol_00001)
abs(1, moveCol_00000)
abs(1, moveCol_00002)
watchelement_undefzero([2, 2, 2], aux95, aux100)
watchelement_undefzero([2, 2, 2], aux87, aux101)
watchelement_undefzero([2, 2], aux99, aux102)
watchelement_undefzero([2, 2], aux98, aux103)
watchelement_undefzero([2, 2], aux98, aux104)
watchelement_undefzero([2, 2], aux99, aux105)
watched-or({w-literal(aux82,1),diseq(blocksCurrentCol_00001_00001,aux92)})
watched-or({w-literal(aux83,1),diseq(blocksCurrentCol_00001_00000,aux93)})
watched-or({w-literal(blocksCurrentCol_00001_00000,2),gaceq(blocksCurrentCol_00001_00000,avatarCurrentCol_00003)})
reify(watched-and({diseq(blocksCurrentCol_00001_00000,aux89),diseq(blocksCurrentCol_00001_00001,aux89)}), aux82)
diseq(aux104,0)
diseq(avatarCurrentCol_00001,blocksCurrentCol_00001_00000)
diseq(avatarCurrentCol_00001,blocksCurrentCol_00001_00001)
watched-or({w-literal(blocksCurrentCol_00001_00000,3),w-literal(moveCol_00000,-1)})
watched-or({w-literal(blocksCurrentCol_00001_00001,5),w-literal(moveCol_00000,1)})
diseq(aux100,0)
ineq(1, aux100, 0)
diseq(aux101,0)
watched-or({w-literal(aux108,2),diseq(blocksCurrentCol_00001_00000,avatarCurrentCol_00003)})
diseq(aux102,0)
watched-or({w-literal(aux101,0),diseq(aux101,1)})
watched-or({w-literal(aux83,1),diseq(blocksCurrentCol_00001_00001,aux93)})
watched-or({w-literal(aux82,1),diseq(blocksCurrentCol_00001_00000,aux92)})
watched-or({gaceq(blocksCurrentCol_00001_00001,aux110),diseq(5,avatarCurrentCol_00001)})
diseq(aux105,0)
watched-or({w-literal(aux84,1),diseq(6,aux94)})
diseq(aux103,0)
watched-or({w-literal(blocksCurrentCol_00001_00001,6),gaceq(blocksCurrentCol_00001_00001,avatarCurrentCol_00003)})
ineq(1, aux105, 0)
diseq(blocksCurrentCol_00001_00000,blocksCurrentCol_00001_00001)
reify(watched-and({diseq(2,aux91),diseq(6,aux91)}), aux84)
reify(watched-and({diseq(blocksCurrentCol_00001_00000,aux90),diseq(blocksCurrentCol_00001_00001,aux90)}), aux83)
watched-or({gaceq(blocksCurrentCol_00001_00000,aux111),diseq(3,avatarCurrentCol_00001)})
ineq(1, aux101, 0)
watched-or({w-literal(aux112,6),diseq(blocksCurrentCol_00001_00001,avatarCurrentCol_00003)})
ineq(1, aux104, 0)
ineq(1, aux103, 0)
watched-or({w-literal(aux84,1),diseq(2,aux94)})
ineq(1, aux102, 0)
sumleq([moveCol_00002,blocksCurrentCol_00001_00000],aux108)
sumgeq([moveCol_00002,blocksCurrentCol_00001_00000],aux108)
sumleq([moveCol_00000,5],aux110)
sumgeq([moveCol_00000,5],aux110)
sumleq([moveCol_00000,3],aux111)
sumgeq([moveCol_00000,3],aux111)
sumleq([moveCol_00002,blocksCurrentCol_00001_00001],aux112)
sumgeq([moveCol_00002,blocksCurrentCol_00001_00001],aux112)
sumleq([blocksCurrentCol_00001_00000,-2],aux99)
sumgeq([blocksCurrentCol_00001_00000,-2],aux99)
sumleq([blocksCurrentCol_00001_00001,-5],aux98)
sumgeq([blocksCurrentCol_00001_00001,-5],aux98)
sumleq([moveCol_00002,4],avatarCurrentCol_00003)
sumgeq([moveCol_00002,4],avatarCurrentCol_00003)
sumleq([avatarCurrentCol_00001,moveCol_00001],4)
sumgeq([avatarCurrentCol_00001,moveCol_00001],4)
sumleq([avatarCurrentCol_00001,-3],aux87)
sumgeq([avatarCurrentCol_00001,-3],aux87)
sumleq([moveCol_00000,4],avatarCurrentCol_00001)
sumgeq([moveCol_00000,4],avatarCurrentCol_00001)
weightedsumleq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux89)
weightedsumgeq([1,2],[avatarCurrentCol_00001,moveCol_00000],aux89)
weightedsumleq([2,1],[moveCol_00001,4],aux90)
weightedsumgeq([2,1],[moveCol_00001,4],aux90)
weightedsumleq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux91)
weightedsumgeq([1,2],[avatarCurrentCol_00003,moveCol_00002],aux91)
sumleq([avatarCurrentCol_00001,moveCol_00000],aux92)
sumgeq([avatarCurrentCol_00001,moveCol_00000],aux92)
sumleq([moveCol_00001,4],aux93)
sumgeq([moveCol_00001,4],aux93)
sumleq([avatarCurrentCol_00003,moveCol_00002],aux94)
sumgeq([avatarCurrentCol_00003,moveCol_00002],aux94)
sumleq([avatarCurrentCol_00003,-3],aux95)
sumgeq([avatarCurrentCol_00003,-3],aux95)
**EOF**
